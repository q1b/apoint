// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Session {
  id             String @id @unique
  active_expires BigInt
  idle_expires   BigInt

  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id String

  access_token  String?
  refresh_token String?

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model User {
  id    String  @id @default(cuid())
  // we add this fields to the User model - we can add more fields, roles, etc.
  name  String?
  image String?

  email String? @unique

  osteopath Osteopath?
  // developer Developer?

  appointments Appointment[]
  // this is require for lucia auth
  auth_session Session[]

  key Key[]
}

model Osteopath {
  id           String        @id @default(cuid())
  batch        String
  year         Int           @default(1)
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique // relation scalar field (used in the `@relation` attribute above)
  calendarId   String?
  appointments Appointment[]
}

// model Developer {
//   id     String @id @default(cuid())
//   batch  String
//   year   Int    @default(1)
//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique // relation scalar field (used in the `@relation` attribute above)
// }

model Appointment {
  id          String    @id @default(cuid())
  label       String
  description String?
  place       String
  startAt     DateTime
  duration    Int
  eventId     String?
  osteopath   Osteopath @relation(fields: [osteopathId], references: [id])
  osteopathId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String? // relation scalar field (used in the `@relation` attribute above)
}
